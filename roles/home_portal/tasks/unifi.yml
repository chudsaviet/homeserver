- name: Create Unifi group
  group:
    name: "{{ secrets.unifi.group_name }}"
    gid: "{{ secrets.unifi.gid }}"
- name: Create Unifi user
  user:
    name: "{{ secrets.unifi.user_name }}"
    comment: Unifi controller user
    uid: "{{ secrets.unifi.uid }}"
    group: "{{ secrets.unifi.group_name }}"
    update_password: always
    create_home: no
- name: Create Unifi directory
  file:
    path: "{{ unifi.path }}"
    state: directory
    owner: "{{ secrets.unifi.user_name }}"
    group: "{{ secrets.unifi.group_name }}"
- name: Create Unifi run directories
  file:
    path: "{{ unifi.run_dir_path }}/{{ item }}"
    state: directory
    owner: "{{ secrets.unifi.user_name }}"
    group: "{{ secrets.unifi.group_name }}"
  with_items:
    - var
    - usr 
- name: Create Unifi archive directory
  file:
    path: "{{ unifi.archive_path }}"
    state: directory
- name: Create and start UniFi container
  docker_container:
    name: "{{ unifi.container_name }}"
    image: "{{ unifi.container_image }}"
    user: "{{ secrets.unifi.uid }}:{{ secrets.unifi.gid }}"
    purge_networks: yes
    networks:
      - name: "{{ unifi.network }}"
    published_ports:
      - 8080:8080/tcp # Device command/control
      - 3478:3478/udp # STUN protocol
    env:
      RUNAS_UID0: false
      UNIFI_UID: "{{ secrets.unifi.uid }}"
      UNIFI_GID: "{{ secrets.unifi.gid }}"
      BIND_PRIV: false
      TZ: "{{ common.timezone }}"
    volumes:
      - "{{ unifi.path }}:/unifi:rw"
      - "{{ unifi.run_dir_path }}/usr:/usr/lib/unifi/run:rw"
      - "{{ unifi.run_dir_path }}/var:/var/run/unifi:rw"
- name: Pull new UniFi image
  docker_image:
    name: "{{ unifi.container_image }}"
  register: unifi_image
- name: Stop UniFi container if new image is present
  docker_container:
    name: "{{ unifi.container_name }}"
    state: stopped
  ignore_errors: yes
  when: unifi_image is changed
- name: Backup UniFi if new image is present
  shell: "tar cvf - {{ unifi.path }} | xz -T 0 > {{ unifi.archive_path }}/unifi-$(date +'%Y%m%d%H%m%S').tar.xz"
  when: unifi_image is changed
- name: Restart UniFi container if new image is present
  docker_container:
    name: "{{ unifi.container_name }}"
    state: started
  ignore_errors: yes
  when: unifi_image is changed
